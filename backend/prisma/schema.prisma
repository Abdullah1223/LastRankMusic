// Database provider
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Generator
generator client {
  provider = "prisma-client-js"
}

// Models
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String
  handle        String?   @unique
  bio           String?
  avatar        String?
  role          Role      @default(USER)
  followers     Int       @default(0)
  following     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  competitions  Competition[]
  submissions   Submission[]
  votes         Vote[]
  donations     Donation[]
  messages      Message[]
}

model Competition {
  id            String    @id @default(cuid())
  title         String
  description   String
  prize         Float
  entryFee      Float?
  genre         String
  status        CompetitionStatus @default(DRAFT)
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  createdBy     User      @relation(fields: [userId], references: [id])
  userId        String
  submissions   Submission[]
  votes         Vote[]
}

model Submission {
  id            String    @id @default(cuid())
  title         String
  description   String?
  mediaUrl      String
  score         Float?
  status        SubmissionStatus @default(PENDING)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  competition   Competition @relation(fields: [competitionId], references: [id])
  competitionId String
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  votes         Vote[]
}

model Vote {
  id            String    @id @default(cuid())
  score         Float
  comment       String?
  createdAt     DateTime  @default(now())
  competition   Competition @relation(fields: [competitionId], references: [id])
  competitionId String
  submission    Submission @relation(fields: [submissionId], references: [id])
  submissionId  String
  user          User      @relation(fields: [userId], references: [id])
  userId        String
}

model Donation {
  id            String    @id @default(cuid())
  amount        Float
  message       String?
  createdAt     DateTime  @default(now())
  user          User      @relation(fields: [userId], references: [id])
  userId        String
}

model Message {
  id            String    @id @default(cuid())
  content       String
  isRead        Boolean   @default(false)
  createdAt     DateTime  @default(now())
  user          User      @relation(fields: [userId], references: [id])
  userId        String
}

enum Role {
  USER
  ARTIST
  JUDGE
  ADMIN
}

enum CompetitionStatus {
  DRAFT
  UPCOMING
  LIVE
  COMPLETED
  CANCELLED
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}